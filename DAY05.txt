CIRCULAR LINKED LIST

package concepts;

	class Node {
	    int data;
	    Node next;

	   
	     Node(int data) {
	        this.data = data;
	        this.next = null;
	    }
	}

	
	class CircularLinkedList {
	    Node head = null;

	    
	    public void addNode(int data) {
	        Node newNode = new Node(data);
	        if (head == null) {
	            head = newNode;
	            newNode.next = head; 
	        } else {
	            Node temp = head;
	            while (temp.next != head) {
	                temp = temp.next; 
	            }
	            temp.next = newNode;
	            newNode.next = head;
	        }
	    }
	
	    public  void insertAtBeginning(int data) {
	        Node newNode = new Node(data);
	        if (head == null) {
	            head = newNode;
	            newNode.next = head;
	        } else {
	            Node temp = head;
	            while (temp.next != head) {
	                temp = temp.next;
	            }
	            temp.next = newNode; 
	            newNode.next = head; 
	            head = newNode; }
	    }

	   
	    public void displayList() {
	        if (head == null) {
	            System.out.println("The list is empty.");
	            return;
	        }
	        Node temp = head;
	        do {
	            System.out.print(temp.data + " -> ");
	            temp = temp.next;
	        } while (temp != head);
	        System.out.println("...");
	    }

	    
	    public void deleteNode(int data) {
	        if (head == null) {
	            System.out.println("List is empty. Cannot delete.");
	            return;
	        }
	        
	        Node temp = head;
	        Node prev = null;
	        
	       
	        if (head.data == data) {
	            
	            while (temp.next != head) {
	                temp = temp.next;
	            }
	            
	            if (head.next == head) {
	                head = null;
	            } else {
	                temp.next = head.next;
	                head = head.next;
	            }
	            System.out.println("Node with data " + data + " deleted.");
	            return
	        }

	       
	        do {
	            prev = temp;
	            temp = temp.next;
	            if (temp.data == data) {
	                prev.next = temp.next;
	                System.out.println("Node with data " + data + " deleted.");
	                return;
	            }
	        } while (temp != head);

	        System.out.println("Node with data " + data + " not found.");
	    }
	

	
	    public static void main(String[] args) {
	        CircularLinkedList list = new CircularLinkedList();

	        list.addNode(10);
	        list.addNode(20);
	        list.addNode(30);
	        list.addNode(40);

	        System.out.println("Circular Linked List:");
	        list.displayList();

	       
	        list.insertAtBeginning(5);
	        System.out.println("After inserting 5 at the beginning:");
	        list.displayList();

	        
	        list.deleteNode(30);
	        System.out.println("After deleting 30:");
	        list.displayList();
	        
	        list.deleteNode(40);
	        System.out.println("After deleting 140:");
	        list.displayList();
	    }
	}
